import pytest


from ..tools import (
        add,
        explode,
        magnitude,
        part2,
        reduce,
        split,
        sum,
        toSnailNumber,
        )



@pytest.mark.parametrize(
        "a,b,expected",
        (
            ('[1,2]', '[[3,4],5]', '[[1,2],[[3,4],5]]'),
            ('[[[[4,3],4],4],[7,[[8,4],9]]]', '[1,1]', '[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]'),
            ))
def test_add(a, b, expected):
    a = toSnailNumber(a)
    b = toSnailNumber(b)
    expected = toSnailNumber(expected)

    number = add(a, b)
    assert number == expected



@pytest.mark.parametrize(
        "value,expected",
        (
            ('[[[[[9,8],1],2],3],4]', '[[[[0,9],2],3],4]'),
            ('[7,[6,[5,[4,[3,2]]]]]', '[7,[6,[5,[7,0]]]]'),
            ('[[6,[5,[4,[3,2]]]],1]', '[[6,[5,[7,0]]],3]'),
            ('[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]', '[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]'),
            ('[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]', '[[3,[2,[8,0]]],[9,[5,[7,0]]]]'),
            ('[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]', '[[[[0,7],4],[7,[[8,4],9]]],[1,1]]'),
            ('[[[[0,7],4],[7,[[8,4],9]]],[1,1]]', '[[[[0,7],4],[15,[0,13]]],[1,1]]'),
            ('[[[[0,7],4],[[7,8],[0,[6,7]]]],[1,1]]', '[[[[0,7],4],[[7,8],[6,0]]],[8,1]]'),
            ))
def test_explode(value, expected):
    number = toSnailNumber(value)
    expected = toSnailNumber(expected)

    explode(number)
    assert number == expected



@pytest.mark.parametrize(
        "value,expected",
        (
            ('10', '[5,5]'),
            ('11', '[5,6]'),
            ('12', '[6,6]'),
            ('[[[[0,7],4],[15,[0,13]]],[1,1]]', '[[[[0,7],4],[[7,8],[0,13]]],[1,1]]'),
            ('[[[[0,7],4],[[7,8],[0,13]]],[1,1]]', '[[[[0,7],4],[[7,8],[0,[6,7]]]],[1,1]]'),
            ))
def test_split(value, expected):
    number = toSnailNumber(value)
    expected = toSnailNumber(expected)

    split(number)
    assert number == expected



@pytest.mark.parametrize(
        "value,expected",
        (
            ('[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]', '[[[[0,7],4],[[7,8],[6,0]]],[8,1]]'),
            ))
def test_reduce(value, expected):
    number = toSnailNumber(value)
    expected = toSnailNumber(expected)

    reduce(number)
    assert number == expected



@pytest.mark.parametrize(
        "a,b,expected",
        (
            ('[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]]', '[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]', '[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]'),
            ('[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]', '[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]', '[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]'),
            ('[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]', '[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]', '[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]'),
            ('[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]', '[7,[5,[[3,8],[1,4]]]]', '[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]'),
            ('[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]', '[[2,[2,2]],[8,[8,1]]]', '[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]'),
            ('[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]', '[2,9]', '[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]'),
            ('[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]', '[1,[[[9,3],9],[[9,0],[0,7]]]]', '[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]'),
            ('[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]', '[[[5,[7,4]],7],1]', '[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]'),
            ('[[[[7,7],[7,7]],[[8,7],[8,7]]],[[[7,0],[7,7]],9]]', '[[[[4,2],2],6],[8,7]]', '[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]'),
            ))
def test_add_reduce(a, b, expected):
    a = toSnailNumber(a)
    b = toSnailNumber(b)
    expected = toSnailNumber(expected)
    result = add(a, b)
    reduce(result)

    assert result == expected



@pytest.mark.parametrize(
        "value,expected",
        (
            ('[9,1]', 29),
            ('[[9,1],[1,9]]', 129),
            ('[[1,2],[[3,4],5]]', 143),
            ('[[[[0,7],4],[[7,8],[6,0]]],[8,1]]', 1384),
            ('[[[[1,1],[2,2]],[3,3]],[4,4]]', 445),
            ('[[[[3,0],[5,3]],[4,4]],[5,5]]', 791),
            ('[[[[5,0],[7,4]],[5,5]],[6,6]]', 1137),
            ('[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]', 3488),
            ('[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]', 4140),
            ))
def test_magnitude(value, expected):
    number = toSnailNumber(value)
    mag = magnitude(number)

    assert mag == expected



def test_sum():
    numbers = (
            '[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]',
            '[[[5,[2,8]],4],[5,[[9,9],0]]]',
            '[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]',
            '[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]',
            '[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]',
            '[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]',
            '[[[[5,4],[7,7]],8],[[8,3],8]]',
            '[[9,3],[[9,9],[6,[4,9]]]]',
            '[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]',
            '[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]',
            )
    expected = '[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]'

    numbers = list(map(toSnailNumber, numbers))
    result = sum(numbers)
    result = reduce(result)
    expected = toSnailNumber(expected)
    assert result == expected



def test_part2():
    numbers = (
            '[[[0,[5,8]],[[1,7],[9,6]]],[[4,[1,2]],[[1,4],2]]]',
            '[[[5,[2,8]],4],[5,[[9,9],0]]]',
            '[6,[[[6,2],[5,6]],[[7,6],[4,7]]]]',
            '[[[6,[0,7]],[0,9]],[4,[9,[9,0]]]]',
            '[[[7,[6,4]],[3,[1,3]]],[[[5,5],1],9]]',
            '[[6,[[7,3],[3,2]]],[[[3,8],[5,7]],4]]',
            '[[[[5,4],[7,7]],8],[[8,3],8]]',
            '[[9,3],[[9,9],[6,[4,9]]]]',
            '[[2,[[7,7],7]],[[5,8],[[9,3],[0,2]]]]',
            '[[[[5,2],5],[8,[3,7]]],[[5,[7,5]],[4,4]]]',
            )
    expected = 3993
    value = part2(map(toSnailNumber, numbers))
    assert value == expected





if __name__ == '__main__':
    test_part2()
